<html>
	<head>
		<title>Poompkin</title>
	</head>
	<body onload="loadCanvas();">
		<canvas id="game-surface" width="800" height="600" onmousedown="">
			Your browser does not support HTML5
		</canvas>
		<br />
		<i>Canvas Above</i>



		<script>
var vertexShaderText = 
[
'precision mediump float;',
'',
'attribute vec2 vertPosition;',
'attribute vec3 vertColor;',
'varying vec3 fragColor;',
'',
'void main()',
'{',
'  fragColor = vertColor;',
'  gl_Position = vec4(vertPosition, 0.0, 1.0);',
'}'
].join('\n');

var fragmentShaderText =
[
'precision mediump float;',
'',
'varying vec3 fragColor;',
'void main()',
'{',
'  gl_FragColor = vec4(fragColor, 1.0);',
'}'
].join('\n');

//DOM objects
var canvas = document.getElementById('game-surface');
var gl = canvas.getContext('webgl');

//GPU data
var vertData = [];
var IndexData = [];

//GL Buffers
var VertexBufferObject;
var indexBufferObject;

var numRects = 0;

//tilemap
var tileMapSize = 8;
var tilemap = [];
var gridWidth = 0.02;
var gridRects = [];

//set colors for gui
var colors = {
	neg:{
		r:1,
		g:1,
		b:1
	},
	pos:{
		r:0,
		g:0,
		b:0
	},
	grid:{
		r:0,
		g:1,
		b:0
	},
};

//rect object
var GRect = function(posX, posY, width, height, color)
{
	this.pos = {
		x: posX,
		y: posY
	};
	this.dim = {
		w: width,
		h: height
	};
	this.id = numRects++;

	//edit GPU data
	for(var i = 0; i < 4; i ++)
	{
		//position
		if(i == 0)
		{
			vertData.push(this.pos.x); // X
			vertData.push(this.pos.y); // Y
		}
		else if(i == 1)
		{
			vertData.push(this.pos.x + this.dim.w); // X
			vertData.push(this.pos.y); // Y
		}
		else if(i == 2)
		{
			vertData.push(this.pos.x + this.dim.w); // X
			vertData.push(this.pos.y - this.dim.h); // Y
		}
		else if(i == 3)
		{
			vertData.push(this.pos.x); // X
			vertData.push(this.pos.y - this.dim.h); // Y
		}
		else
			break;

		//color
		vertData.push(colors[color].r);
		vertData.push(colors[color].g);
		vertData.push(colors[color].b);
	}

	//index data
	let j = 4 * this.id;
    IndexData.push(j);
    IndexData.push(j + 1);
    IndexData.push(j + 2);
    IndexData.push(j);
    IndexData.push(j + 2);
    IndexData.push(j + 3);
}

var loadCanvas = function () {

	//resize canvas
	canvas.height =  document.body.clientHeight - 100;
	canvas.width = canvas.height;

	if (!gl) {
		console.log('WebGL not supported, falling back on experimental-webgl');
		gl = canvas.getContext('experimental-webgl');
	}

	if (!gl) {
		alert('Your browser does not support WebGL');
	}

	gl.clearColor(0.75, 0.85, 0.8, 1.0);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	//
	// Create shaders
	// 
	var vertexShader = gl.createShader(gl.VERTEX_SHADER);
	var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);

	gl.shaderSource(vertexShader, vertexShaderText);
	gl.shaderSource(fragmentShader, fragmentShaderText);

	gl.compileShader(vertexShader);
	if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
		console.error('ERROR compiling vertex shader!', gl.getShaderInfoLog(vertexShader));
		return;
	}

	gl.compileShader(fragmentShader);
	if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
		console.error('ERROR compiling fragment shader!', gl.getShaderInfoLog(fragmentShader));
		return;
	}

	var program = gl.createProgram();
	gl.attachShader(program, vertexShader);
	gl.attachShader(program, fragmentShader);
	gl.linkProgram(program);
	if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
		console.error('ERROR linking program!', gl.getProgramInfoLog(program));
		return;
	}
	gl.validateProgram(program);
	if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {
		console.error('ERROR validating program!', gl.getProgramInfoLog(program));
		return;
	}

	//init triangles here

	//tilemap
	var ratio = 2 / tileMapSize;
	for(var y = 1; y > -1; y -= ratio)
	{
		for(var x = -1; x < 1; x += ratio)
		{
			tilemap.push(new GRect(x, y - ratio, ratio, -ratio, 'neg'));
		}
	}

	//grid
	for(x = -1; x < 1 + ratio; x += ratio)
	{
		gridRects.push(new GRect(x - gridWidth / 2, 1 , gridWidth, 2, 'grid'));
	}

	for(y = 1; y > -1 - ratio; y -= ratio)
	{
		gridRects.push(new GRect(-1, y + gridWidth / 2, 2, gridWidth, 'grid'));
	}

	VertexBufferObject = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, VertexBufferObject);
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertData), gl.DYNAMIC_DRAW);

	indexBufferObject = gl.createBuffer();
   	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBufferObject);
   	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(IndexData), gl.DYNAMIC_DRAW);

	var positionAttribLocation = gl.getAttribLocation(program, 'vertPosition');
	var colorAttribLocation = gl.getAttribLocation(program, 'vertColor');
	gl.vertexAttribPointer(
		positionAttribLocation, // Attribute location
		2, // Number of elements per attribute
		gl.FLOAT, // Type of elements
		gl.FALSE,
		5 * Float32Array.BYTES_PER_ELEMENT, // Size of an individual vertex
		0 // Offset from the beginning of a single vertex to this attribute
	);
	gl.vertexAttribPointer(
		colorAttribLocation, // Attribute location
		3, // Number of elements per attribute
		gl.FLOAT, // Type of elements
		gl.FALSE,
		5 * Float32Array.BYTES_PER_ELEMENT, // Size of an individual vertex
		2 * Float32Array.BYTES_PER_ELEMENT  // Offset from the beginning of a single vertex to this attribute
	);

	gl.enableVertexAttribArray(positionAttribLocation);
	gl.enableVertexAttribArray(colorAttribLocation);

	gl.useProgram(program);

	//set update loop
	updateCanvas();
};

function updateCanvas()
{
	//clear screen
     gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

     //update vertex arrays
     gl.bindBuffer(gl.ARRAY_BUFFER, VertexBufferObject);
     gl.bufferSubData(gl.ARRAY_BUFFER, 0, new Float32Array(vertData));

     //drawArrays
     gl.drawElements(gl.TRIANGLES, IndexData.length, gl.UNSIGNED_SHORT, 0);
}
	</script>	
	</body>
</html>